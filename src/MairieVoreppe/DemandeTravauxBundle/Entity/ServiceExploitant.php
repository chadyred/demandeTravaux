<?php

namespace MairieVoreppe\DemandeTravauxBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
//On va mettre le namespace de notre méthode Classe interface Constraints de notre validator
use Symfony\Component\Validator\Constraints as Assert;
//Permet de récupérer les valeur des objets en cours de vie dans notre classe
use Symfony\Component\Validator\ExecutionContextInterface;

/**
 * ServiceExploitant
 *
 * @ORM\Table()
 * @ORM\Entity(repositoryClass="MairieVoreppe\DemandeTravauxBundle\Entity\ServiceExploitantRepository")
 * @Assert\Callback(methods={"isLiaisonValid"})
 */
class ServiceExploitant
{
    /**
     * @var integer
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\ManyToOne(targetEntity="Application\Sonata\UserBundle\Entity\Service", inversedBy="servicesExploitant")
     */
    private $service;

    /**
     * @var string
     *
     * @ORM\ManyToOne(targetEntity="MairieVoreppe\DemandeTravauxBundle\Entity\Exploitant", inversedBy="servicesExploitant")
     */
    private $exploitant;


    /**
     * @var string
     *
     * @ORM\OneToMany(targetEntity="MairieVoreppe\DemandeTravauxBundle\Model\Travaux", mappedBy="servicesExploitant")
     */
    private $travaux;

    /**
     * Constructor
     */
    public function __construct()
    {
        $this->travaux = new \Doctrine\Common\Collections\ArrayCollection();
    }

    /**
     * Get id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set exploitant
     *
     * @param string $exploitant
     *
     * @return ServiceExploitant
     */
    public function setExploitant(\MairieVoreppe\DemandeTravauxBundle\Entity\Exploitant $exploitant)
    {
        $this->exploitant = $exploitant;

        return $this;
    }

    /**
     * Get exploitant
     *
     * @return string
     */
    public function getExploitant()
    {
        return $this->exploitant;
    }

    /**
     * Get travaux
     *
     * @return string
     */
    public function getTravaux()
    {
        return $this->travaux;
    }

    /**
     * Add travaux
     *
     * @param \MairieVoreppe\DemandeTravauxBundle\Model\Travaux $travaux
     *
     * @return ServiceExploitant
     */
    public function addTravaux(\MairieVoreppe\DemandeTravauxBundle\Model\Travaux $travaux)
    {
        $this->travaux[] = $travaux;

        return $this;
    }

    /**
     * Remove travaux
     *
     * @param \MairieVoreppe\DemandeTravauxBundle\Model\Travaux $travaux
     */
    public function removeTravaux(\MairieVoreppe\DemandeTravauxBundle\Model\Travaux $travaux)
    {
        $this->travaux->removeElement($travaux);
    }

    /**
     * Set service
     *
     * @param \Application\Sonata\UserBundle\Entity\Service $service
     *
     * @return ServiceExploitant
     */
    public function setService(\Application\Sonata\UserBundle\Entity\Service $service = null)
    {
        $this->service = $service;

        return $this;
    }

    /**
     * Get service
     *
     * @return \Application\Sonata\UserBundle\Entity\Service
     */
    public function getService()
    {
        return $this->service;
    }

    /**
    * Condition de validation personalisée pour les périodes: 
    *   - la date de début ne peut pas être antérieur à la date de fin
    *   - si la période ne chevauche pas une autre. Date de debut et de fin non présente entre date début et fin. 
    *    (bien penser si la date englobe une période complète)
    */
    public function isLiaisonValid(ExecutionContextInterface $context)
    {
        foreach($this->getExploitant()->getServicesExploitant() as $se)
        {
            //EN vérifiant l'id, cela permet de ne pas afficher d'erreur s'il s'agit de notre propre entité. Ce qui signifie
            //qu'il s'agit d'une simple MAJ
            if($se->getService() == $this->getService() && $se->getId() !== $this->getId()) 
            {
                //Mise à jour
                //$context->addViolationAt('duree', 'Veuillez indiquer une durée plus grande que 0 !', array(), null);
                $context->buildViolation('Cette exploitant est déjà lié avec ce service !')
                        ->addViolation();
            }
        }
    }

    public function __toString()
    {
        return "Exploitant : " . $this->getExploitant()->getRaisonSociale() . "- Service : " . $this->getService()->getName();
    }
}
