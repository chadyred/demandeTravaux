<?php

namespace MairieVoreppe\AdminBundle\Admin;
 
use Sonata\AdminBundle\Admin\Admin;
use Sonata\AdminBundle\Form\FormMapper;
use Sonata\AdminBundle\Datagrid\DatagridMapper;
use Sonata\AdminBundle\Datagrid\ListMapper;
use Sonata\AdminBundle\Show\ShowMapper;
use MairieVoreppe\DemandeTravauxBundle\Form\LogoType;
use MairieVoreppe\DemandeTravauxBundle\Form\AdresseType;

use Knp\Menu\ItemInterface as MenuItemInterface;
use libphonenumber\PhoneNumberFormat;
 
class ResponsableExploitantAdmin extends AbstractAdmin
{
	 // setup the default sort column and order
    protected $datagridValues = array(
        '_sort_order' => 'ASC',
        '_sort_by' => 'raisonSociale'
    );

    
    // L'ensemble des champs qui seront montrer lors de la création ou de la modification d'une entité
    protected function configureFormFields(FormMapper $formMapper)
    {
        $formMapper
            ->with('General')
                /*->add('user', 'sonata_type_model',  array(
                    'btn_add'       => false,      //Ce bouton nous permet d'ajouter une entité dans la BDD
                    'btn_list'      => false,     //which will be translated
                    'btn_delete'    => false,             //or hide the button.
                    'btn_catalogue' => 'SonataNewsBundle', //Custom translation domain for buttons
                ), array(
                    'placeholder' => 'No author selected',
                    'attr' => array('hidden' => true)
                ))   */
	            ->add('civilite', 'entity', array('class' => 'MairieVoreppe\DemandeTravauxBundle\Entity\Civilite',
	                'property' => 'abreviation'))
	            ->add('noteDivers', 'text', array('required' => false))
	            ->add('nom')
	            ->add('prenom')
	            ->add('telMobile', 'tel', array('default_region' => 'FR', 'format' => PhoneNumberFormat::NATIONAL, 'required' => false))
	            ->add('email')
	            ->add('telFixe', 'tel', array('default_region' => 'FR', 'format' => PhoneNumberFormat::NATIONAL, 'required' => false))
	            ->add('adresse', new AdresseType()) 
		         ->add('periodes', 'sonata_type_collection', array(
		                // Prevents the "Delete" option from being displayed
		                'type_options' => array('delete' => true)
		            ), array(
		                'edit' => 'inline',
		                'inline' => 'table',
		                'sortable' => 'position',
		            ))           
        	->end()
        ;
    }

    /**
    *
    * Fonction qui va permettre d'afficher les différents filtres de recherche dans notre tableau 
    * de notre interface.
    *
    */
    protected function configureDatagridFilters(DatagridMapper $datagridMapper)
    {
        $datagridMapper
            ->add('nom')
            ->add('prenom')
        ;
    }
 
 	/**
 	* Fonction qui redéfini celle de la classe mère Admin. Cette fonction va nous permettre de préciser les
 	* champs qui seront affiché dans notre tableau lorsque l'on listera nos entités
 	*/
    protected function configureListFields(ListMapper $listMapper)
    {
        $listMapper
            ->addIdentifier('id', null, array('route' => array('name' => 'show')))
            ->add('nom')
            ->add('prenom')
            ->add('_action', 'actions', array(
                'actions' => array(
                    'show' => array(),
                    'edit' => array(),
                    'delete' => array()
                )
            ))
        ;
    }

    /**
    * Fonction qui redéfinie la fonction de la classe mère qui permet d'indiquer les champs qui seront affichés
    * lorsque l'on consultera un responsable d'exploitant
    */
    protected function configureShowFields(ShowMapper $showMapper)
    {
        $showMapper
            ->add('prenom')
        ;
    }

    public function preUpdate($object)
    {   
        $this->gestionPersistanceAdresse($object);
    }

    public function prePersist($object)
    {
        $this->gestionPersistanceAdresse($object);
    }

    protected function gestionPersistanceAdresse($object)
    {
       //Permet de récupérrrer un service de l'administration
        //$servicePeriode = $this->getConfigurationPool()->getAdminByAdminCode('MairieVoreppeDemandeTravauxBundle.admin.periode');

        // On parcours chacun des champs
        foreach ($this->getFormFieldDescriptions() as $fieldName => $fieldDescription)
        {
           //Si on a un sonata_type_collection, que 'est une relation et que l'entité Refus est pointé
            if($fieldDescription->getType() === 'sonata_type_collection' &&
                ($associationMapping = $fieldDescription->getAssociationMapping()) &&
                ($associationMapping['targetEntity'] === 'MairieVoreppe\DemandeTravauxBundle\Entity\Periode'))
             {
                $getter = 'get' . $fieldName;
                $setter = 'add' . $fieldName;

                /** @var Periode $periode */
                $periodes = $object->$getter();

                //On vérifie que l'on a bien un refus
                if(count($periodes) > 0)
                {
                    //Si on a un élément dans notre collection de periodes, on va alors persisté ce ou ces derniers
                    foreach($periodes as $unePeriode)
                    {
                        //$unRefus->setModerateur($user);
                        $object->addPeriodes($unePeriode);


                    }
                }
            }
        }
    }

}