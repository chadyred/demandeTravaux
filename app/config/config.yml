imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }

framework:
    #esi:             ~
    translator:      { fallback: "%locale%" }
    secret:          "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    templating:
        engines: ['twig']
        #assets_version: SomeVersionScheme
    default_locale:  "%locale%"
    trusted_hosts:   ~
    trusted_proxies: ~
    session:
        # handler_id set to null will use default session handler from php.ini
        handler_id:  ~
        gc_probability: 0
    fragments:       ~
    http_method_override: true


# Twig Configuration
twig:
    debug:            "%kernel.debug%"
    strict_variables: "%kernel.debug%"
    form:
        resources:
            - MairieVoreppeUsefulBundle::fields.html.twig #redefinition de l'autocomplete
            - 'bootstrap_3_layout.html.twig' #le form_label(variable, string) ne marche plus 
            - 'InfiniteFormBundle::form_theme.html.twig'

# Assetic Configuration
assetic:
    debug:          "%kernel.debug%"
    use_controller: false
    #Necessaire pour l'admin bundle afin qu'il puisse utiliser les assets de ce bundle
    bundles:        [ MairieVoreppeAdminBundle, SonataAdminBundle ]
    #java: /usr/bin/java
    filters:  
        less:
            node: /usr/bin/node
            node_paths: [/usr/local/lib/node_modules]
            apply_to: "\.less$" 
        cssrewrite: ~
        #closure:
        #    jar: "%kernel.root_dir%/Resources/java/compiler.jar"
        cssembed:
            jar: %kernel.root_dir%/Resources/java/cssembed-0.4.5.jar
        uglifyjs:
        # the path to the uglifyjs executable
            bin: %kernel.root_dir%/Resources/node_modules/uglify-js/bin/uglifyjs
        uglifycss:
            bin: %kernel.root_dir%/Resources/node_modules/uglifycss/uglifycss
    assets:
        # bootstrap_datepicker_js_fr:
        #     inputs:
        #         - "bundles/mairievoreppedemandetravaux/components/bootstrap-datepicker/dist/locales/bootstrap-datepicker.fr.min.js"
        bootstrap_css:
            inputs:
                - "bundles/mairievoreppedemandetravaux/components/bootstrap/dist/css/bootstrap.css"
        moment_js:
            inputs:
                - "bundles/mairievoreppedemandetravaux/components/moment/moment.js"
                
# Doctrine Configuration
doctrine:
    dbal:
        driver:   "%database_driver%"
        host:     "%database_host%"
        port:     "%database_port%"
        dbname:   "%database_name%"
        user:     "%database_user%"
        password: "%database_password%"
        charset:  UTF8
        types:
            json: Sonata\Doctrine\Types\JsonType
            phone_number: Misd\PhoneNumberBundle\Doctrine\DBAL\Types\PhoneNumberType
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: "%kernel.root_dir%/data/data.db3"
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #     path:     "%database_path%"
    orm:
        auto_generate_proxy_classes: "%kernel.debug%"
        auto_mapping: true
        mappings:
            ApplicationSonataUserBundle:
                type: annotation
            SonataUserBundle: ~
            FOSUserBundle: ~          
            custom_mapping:     #on référence notre dossier model afin d'avoir les relations inverses dans une ManyToOne (testé si on a toute les personnes physique des civilite)
                type: annotation
                prefix: MairieVoreppe\DemandeTravauxBundle\Model\
                dir: "%kernel.root_dir%/../src/MairieVoreppe/DemandeTravauxBundle/Model/"
                is_bundle: false

# Swiftmailer Configuration
swiftmailer:
    transport: "%mailer_transport%"
    host:      "%mailer_host%"
    username:  "%mailer_user%"
    password:  "%mailer_password%"
    spool:     { type: memory }

sp_bower:
    install_on_warmup: true
    bundles:
        MairieVoreppeDemandeTravauxBundle: ~  
    #On applique des filtre à notre package de Bower, uniquement en prod
    assetic:
        enabled: true
        nest_dependencies: true #Je le passe finalement à false à cause des nombreux conflit
        filters:
            css:
                - ?uglifycss
            js:
                - ?uglifyjs
            packages:
                bootstrap:
                    css:
                        - cssembed
                        - cssrewrite

# Filtre pour assetic qui permet de réétablir les URL qui vont dans un dossier pour revenir en arrière, les chemin sont rétablie de manière réfléchie
fkr_css_url_rewrite:
#    rewrite_only_if_file_exists: true
    clear_urls: true
    
#Configuration du FOSUSerBundle, merci stof ;)
fos_user:
    db_driver: orm
    firewall_name: fos_userbundle
    user_class: Application\Sonata\UserBundle\Entity\User    
    profile:  # Authentication Form(username, password) : nécessaire pour que les informations de base se distingue des informations classique
        form:
            type:               fos_user_profile
            handler:            fos_user.profile.form.handler.default
            name:               fos_user_profile_form
            # Please note : this is not the default value : pour sûr, ce group de validation n'existe pas, on peut ainsi modifier
            # les informations d'authentification à souhait
            # validation_groups:  [Authentication]
    group:
        group_class:   Application\Sonata\UserBundle\Entity\Service
        #group_manager: sonata.user.orm.group_manager                    # If you're using doctrine orm (use sonata.user.mongodb.user_manager for mongodb)
    # If you're using doctrine orm (use sonata.user.mongodb.group_manager for mongodb)
    service:
        user_manager: sonata.user.orm.user_manager    
        
sonata_user:
    security_acl: true #Access Control List : nécessaire pour les actions EDIT, CREATE etc. à voir plus tard
    manager_type: orm  # can be orm or mongodb
    class:
        user: Application\Sonata\UserBundle\Entity\User
        group: Application\Sonata\UserBundle\Entity\Service
    admin:                  # Admin Classes
        user:
            class:          Application\Sonata\UserBundle\Admin\Model\UserAdmin
            controller:     SonataAdminBundle:CRUD
            translation:    SonataUserBundle
        group:
            class:          Application\Sonata\UserBundle\Admin\Model\GroupAdmin
            controller:     SonataAdminBundle:CRUD
            translation:    SonataUserBundle

    profile:  # Profile Form (firstname, lastname, etc ...)
        form:
            type:               mairievoreppe_user_profile
            handler:            sonata.user.profile.form.handler.default
            name:               mairievoreppe_user_profile
            validation_groups:  [Profile]

        # Customize user portal menu by setting links
        menu:
            - { route: 'sonata_user_profile_edit', label: 'link_edit_profile', domain: 'SonataUserBundle'}
            - { route: 'sonata_user_profile_edit_authentication', label: 'link_edit_authentication', domain: 'SonataUserBundle'}
        register:
            form:
                type:                 sonata_user_registration
                handler:              sonata.user.registration.form.handler.default
                name:                 sonata_user_registration_form
                validation_groups:


sonata_admin:
    title: 'Administration'
    title_logo: bundles/mairievoreppeadmin/images/logo_interface_admin/cones.png
    templates:
        show:       MairieVoreppeAdminBundle:Admin:Display_Client.html.twig

    dashboard:
        blocks:
        # display a dashboard block
        - position: left
          type: sonata.block.service.text
          settings:
            content: >
                <h1>Bienvenue sur le panneau d'administration</h1>
                <p>Ici vous pouvez administrer les services et les utilisateurs de l'application Demande Travaux</p> 
        - { position: right, type: sonata.admin.block.admin_list }

sonata_block:
    default_contexts: [cms]
    blocks:
        sonata.admin.block.admin_list:
            contexts:   [admin]
        sonata.block.service.text:
        sonata.block.service.action:
        sonata.block.service.rss:

        sonata.user.block.menu:    # used to display the menu in profile pages
        sonata.user.block.account: # used to display menu option (login option)
        sonata.block.service.text: # used to if you plan to use Sonata user routes
        sonata.admin.block.search_result:

sonata_doctrine_orm_admin:
    # default value is null, so doctrine uses the value defined in the configuration
    entity_manager: '@doctrine.orm.entity_manager'

#Utilisation de google places (exemple de configuration)
shtumi_useful:
    autocomplete_entities:
        villes:
            class: MairieVoreppeDemandeTravauxBundle:Ville
            #role: ROLE_ADMIN
            property: villeNom
            search: begins_with

knp_snappy:
    pdf:
        enabled:    true
        binary:     /usr/local/bin/wkhtmltopdf
        options:    []
    image:
        enabled:    true
        binary:     /usr/local/bin/wkhtmltoimage
        options:    []

#Permet de mettre le site en maintenance pendant une durée 'lexik:maintenance:lock [--set-ttl]' -> 'lexik:maintenance:unlock'
lexik_maintenance:
    authorized:
        ips: ['172.17.9.66', '127.0.0.1', '::1']
    driver:        
          # File driver    
        class: '\Lexik\Bundle\MaintenanceBundle\Drivers\FileDriver'                # class for file driver 
        options: {file_path: %kernel.root_dir%/cache/lock}                         # file_path is the complete path for create the file

    #Optional. response code and status of the maintenance page
    response:
        code: 503
        status: "Service Temporarily Unavailable"    